import csv
import pandas as pd
from appium import webdriver
from appium.options.common.base import AppiumOptions
from appium.webdriver.common.appiumby import AppiumBy
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, WebDriverException
from concurrent.futures import ThreadPoolExecutor, as_completed
import logging

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# Paths to input and output CSV files
input_csv = "/home/dell/test/test_env/harsha_user.csv"
output_csv = "validation_results.csv"

# Function to create Appium driver
def create_driver():
    try:
        options = AppiumOptions()
        options.load_capabilities({
            "appium:automationName": "UiAutomator2",
            "appium:platformName": "Android",
            "appium:platformVersion": "14",
            "appium:deviceName": "00078344R000676",
            "appium:appWaitActivity": "*",
            "appium:appWaitDuration": 30000,
            "appium:app": "/home/dell/Downloads/uatharshaapp-release.apk",
            "appium:newCommandTimeout": 300,
            "appium:connectHardwareKeyboard": True
        })
        logging.info("Initializing Appium driver...")
        driver = webdriver.Remote("http://127.0.0.1:4723", options=options)
        logging.info("Driver initialized successfully.")
        return driver
    except WebDriverException as e:
        logging.error(f"Driver initialization failed: {e}")
        raise RuntimeError(f"Driver initialization failed: {e}")

# Function to read users from a CSV file
def read_users_from_csv(file_path):
    try:
        with open(file_path, mode='r') as file:
            csv_reader = csv.DictReader(file)
            users = [row for row in csv_reader]
            logging.info(f"Loaded {len(users)} users from {file_path}.")
            return users
    except Exception as e:
        logging.error(f"Failed to read users from CSV: {e}")
        raise

# Function to write validation results to a CSV file
def write_validation_to_csv(results, file_path):
    try:
        df = pd.DataFrame(results)
        df.to_csv(file_path, index=False)
        logging.info(f"Validation results written to {file_path}.")
    except Exception as e:
        logging.error(f"Failed to write results to CSV: {e}")
        raise

# Function to perform login and validate
def login_and_validate(user):
    username = user['username']
    password = user['password']
    validation_message = ""
    driver = None

    try:
        driver = create_driver()
        # Wait for username field to be visible
        username_field = WebDriverWait(driver, 100).until(
            EC.presence_of_element_located((AppiumBy.ID, "org.thesocialbytes.harshatrust:id/edtUserName"))
        )
        password_field = driver.find_element(AppiumBy.ID, "org.thesocialbytes.harshatrust:id/edtPassword")
        login_button = driver.find_element(AppiumBy.ID, "org.thesocialbytes.harshatrust:id/btnLogin")

        # Perform login
        username_field.clear()
        username_field.send_keys(username)
        password_field.clear()
        password_field.send_keys(password)
        login_button.click()

        # Check for error messages
        try:
            error_message = WebDriverWait(driver, 100).until(
                EC.presence_of_element_located((AppiumBy.ID, "error_message_id"))
            ).text
            if "zip file not updated" in error_message.lower():
                validation_message = "Login failed: Outdated zip file."
            else:
                validation_message = "Login failed: Other reasons."
        except TimeoutException:
            validation_message = "Successfully logged in."
    except TimeoutException as e:
        validation_message = f"Timeout during login: {str(e)}"
    except Exception as e:
        validation_message = f"Error during login: {str(e)}"
    finally:
        if driver:
            driver.quit()

    return {
        "username": username,
        "validation_message": validation_message
    }

# Function to handle multiple user logins in parallel
def multi_user_login(users):
    validation_results = []
    with ThreadPoolExecutor(max_workers=2) as executor:
        futures = {executor.submit(login_and_validate, user): user for user in users}

        for future in as_completed(futures):
            try:
                result = future.result()
                validation_results.append(result)
            except Exception as e:
                username = futures[future]['username']
                validation_results.append({
                    "username": username,
                    "validation_message": f"Error processing user: {str(e)}"
                })

    return validation_results

# Main function to handle all scenarios
def main():
    try:
        users = read_users_from_csv(input_csv)
        logging.info("Starting multi-user login...")
        validation_results = multi_user_login(users)
        write_validation_to_csv(validation_results, output_csv)
        logging.info(f"Validation process completed. Results are saved in {output_csv}.")
    except Exception as e:
        logging.error(f"An error occurred in the main workflow: {e}")

if __name__ == "__main__":
    main()
